# SENAITE HAPROXY Configuration
#
# HAProxy configurations changed for versions greater 1.6.x.
#
# Use this command to check the config:
# $ haproxy -f /etc/haproxy/haproxy.cfg -c
global
  log /dev/log  local0
  log /dev/log  local1 notice
  stats socket /var/lib/haproxy/stats mode 600 level admin
  chroot /var/lib/haproxy
  user haproxy
  group haproxy
  daemon

defaults
  log global
  mode  http

  # Enable logging of HTTP request, session state and timers
  # http://cbonte.github.io/haproxy-dconv/configuration-1.4.html#option httplog
  option  httplog

  # Log null connection
  # http://cbonte.github.io/haproxy-dconv/configuration-1.4.html#4.2-option%20dontlognull
  option  dontlognull

  # Enable passive HTTP connection closing
  # http://cbonte.github.io/haproxy-dconv/configuration-1.4.html#4.2-option%20httpclose
  option httpclose

  # Early dropping of aborted requests pending in queues
  # http://cbonte.github.io/haproxy-dconv/configuration-1.4.html#option abortonclose
  option abortonclose

  # number of retries to perform on a server after a connection failure
  # http://cbonte.github.io/haproxy-dconv/configuration-1.4.html#retries
  retries 3

  # http://cbonte.github.io/haproxy-dconv/configuration-1.4.html#4.2-option%20redispatch_
  # session redistribution in case of connection failure
  option redispatch
  # http://cbonte.github.io/haproxy-dconv/configuration-1.4.html#monitor-uri
  monitor-uri /haproxy-ping

  # Enable status page at this URL, on the port HAProxy is bound to
  stats enable

{% if haproxy_with_http_stats %}
  # http://cbonte.github.io/haproxy-dconv/configuration-1.4.html#stats uri
  stats uri /haproxy-status
  stats refresh 5s
  stats realm Haproxy statistics
  stats auth {{ haproxy_stats_user }}:{{ haproxy_stats_pass }}
{% endif %}

  timeout connect 60s
  timeout client  300s
  timeout server  300s
  timeout queue   300s

{% if ansible_os_family == 'Debian' %}
  errorfile 400 /etc/haproxy/errors/400.http
  errorfile 403 /etc/haproxy/errors/403.http
  errorfile 408 /etc/haproxy/errors/408.http
  errorfile 500 /etc/haproxy/errors/500.http
  errorfile 502 /etc/haproxy/errors/502.http
  errorfile 503 /etc/haproxy/errors/503.http
  errorfile 504 /etc/haproxy/errors/504.http
{% endif %}

frontend {{ haproxy_frontend_id }}
    bind {{ haproxy_frontend_bind_address }}:{{ haproxy_frontend_port }}
    default_backend {{ haproxy_backend_id }}

backend {{ haproxy_backend_id }}

    # As of version 1.6, appsessions was removed. It is more flexible and more
    # convenient to use stick-tables instead, and stick-tables support multi-master
    # replication and data conservation across reloads, which appsessions did not.
    #
    # Use Zope's __ac cookie as a basis for session stickiness if present.
    # appsession __ac len 32 timeout 120m
    #
    # https://cbonte.github.io/haproxy-dconv/1.6/configuration.html#4-stick-table
    stick-table type string len 32 size 1m expire 120m
    stick store-response res.cook(__ac)
    stick match req.cook(__ac)

    # Otherwise add a cookie called "serverid" for maintaining session stickiness.
    # This cookie lasts until the client's browser closes, and is invisible to Zope.
    cookie serverid insert nocache indirect
    # If no session found, use the roundrobin load-balancing algorithm to pick a backend.
    # balance roundrobin

    # The server with the lowest number of connections receives the connection
    balance leastconn

    balance {{ haproxy_backend_balance_method }}
    option forwardfor
{% if haproxy_backend_httpchk != '' %}
    option httpchk {{ haproxy_backend_httpchk }}
{% endif %}

{% for client in range(0, plone_client_count|int ) %}
    server {{ plone_instance_name }}_{{ client + 1 }} 127.0.0.1:{{ plone_client_base_port | int + client }} cookie {{ plone_instance_name }}_{{ client + 1 }} check
{% endfor %}
