---
- name: Clean known_hosts of NUH's (ignoring errors)
  known_hosts:
    name: "{{ hostname }}"
    state: absent
  delegate_to: localhost
  no_log: True
  ignore_errors: True

- name: Wait for NUH ssh to be ready
  include_role:
    name: common
    tasks_from: wait-for-ssh
  vars:
    ssh_host: "{{ hostname }}"
    host_username: "root"

- block:

  - block:

    - name: Copy license file
      copy:
        src: "{{ nuh_license_file }}"
        dest: "/opt/proxy/nuh.license"

    - name: Verify License is valid
      shell: java -jar /opt/proxy/bin/lm/LicenseManager.jar features

    when: nuh_license_file is defined

  - name: Run the setup script for SA
    command: ./setup.sh
    environment:
      HNAME: "{{ hostname }}"
      HA: "n"
    args:
      chdir: /opt/proxy/bin
    when: nuh_sa_or_ha is match('sa')

  - name: Run the setup script for HA primary
    command: ./setup.sh
    environment:
      HNAME: "{{ hostname }}"
      HA: "y"
      MASTER: "y"
      PEERADDR: "{{ groups['nuhs'][1] }}"
      PEERPASSWORD: "{{ nuh_default_password }}"
    args:
      chdir: /opt/proxy/bin
    when:
      - nuh_sa_or_ha is match('ha')
      - inventory_hostname == groups['nuhs'][0]

  - name: Run the setup script for HA secondary
    command: ./setup.sh
    environment:
      HNAME: "{{ hostname }}"
      HA: "y"
      MASTER: "n"
      PEERADDR: "{{ groups['nuhs'][0] }}"
      PEERPASSWORD: "{{ nuh_default_password }}"
    args:
      chdir: /opt/proxy/bin
    when:
      - nuh_sa_or_ha is match('ha')
      - inventory_hostname == groups['nuhs'][1]

  - name: Set the timezone
    command: timedatectl set-timezone {{ nuh_timezone }}


  - block:

    - name: Get vsd node(s) information
      import_role:
        name: common
        tasks_from: vsd-node-info.yml
      vars:
        vsd_hostname: "{{ vsd_fqdn }}"

    - block:

      - name: Copy the network config for NUH internal and external networks
        template: src=config.yml.j2 backup=no dest=/opt/proxy/data/config.yml owner=root group=root mode=0640

      - name: Run the network config script on NUH
        command: ansible-playbook configure.yml
        args:
          chdir: /opt/proxy/bin/ansible

      - name: Check if the eth1 is configured on Internal interface
        shell: set -o pipefail && ip netns exec Internal ip addr list | grep eth1

      - name: Check if the eth2 is configured on External interfaces
        shell: set -o pipefail && ip netns exec {{ item.name }} ip addr list | grep eth2
        with_items: "{{ external_interfaces }}"
        when: external_interfaces is defined and external_interfaces | length > 0

      when: inventory_hostname == groups['nuhs'][0]



    when: 
      - internal_ip is defined
      - not skip_vsd_installed_check

  - block:

      - name: Copy the Custom configuration file if provided by user
        copy:
          dest: "/opt/proxy/data/config.yml"
          src: "{{ custom_configuration_file_location }}"
          mode: 0640
          owner: "root"
          group: "root"

      - name: Run the configuration script on NUH
        command: ansible-playbook configure.yml
        args:
          chdir: /opt/proxy/bin/ansible

    when:
      - custom_configuration_file_location is defined
      - inventory_hostname == groups['nuhs'][0]

  - name: Create and transfer certs
    include_role:
      name: common
      tasks_from: vsd-generate-transfer-certificates
    when: not skip_vsd_installed_check
    vars:
      certificate_password: "{{ nuh_default_password }}"
      certificate_username: "{{ inventory_hostname }}"
      commonName: "{{ inventory_hostname }}"
      certificate_type: server
      scp_user: "root"
      scp_location: /opt/proxy/data/certs
      additional_parameters:  -d {{ inventory_hostname }}

  remote_user: "{{ nuh_default_username }}"

- name: Setup health monitoring
  include_role:
    name: setup-health-monitoring
  vars:
    component_username: "{{ nuh_default_username }}"
  when: health_monitoring_agent | default("none") != "none"

