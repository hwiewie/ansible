---
- name: 'Check mandatory variables are defined'
  assert:
    that:
      - state is defined
      - state is match('(started|stopped|restarted)')
      - stack_name is defined
      - stack_install_root_dir is defined

- debug:
    msg: 
      - "state: {{ state }}"
      - "op: {{ op }}"
    verbosity: 2

  # Start/stop are idempotent so we can just always run them
#- name: "Performing '{{ op }}' on '{{ stack_name }}'"
  #command: "chdir={{ stack_dir }}/ ./{{ op }}"
  ## Sometimes get a tput error if we don't do this.
  #environment:
    #TERM: vt100
    ## This is needed so our scripts can find the ip command as ansible runs with a
    ## different PATH to when you ssh in manually.
    #PATH: "{{ ansible_env.PATH}}:/sbin:/usr/sbin"
  #register: stack_op
  ## This check is a bit more complicated because 'stdout' doesn't always exist on 'stack_op'
  ##failed_when: "'stdout' in stack_op and 'UNHEALTHY' in stack_op.stdout"

  # Have to tweak the path so the scripts can find the 'ip' binary
- name: "Performing '{{ op }}' on '{{ stack_name }}' in {{ stack_dir }}"
  shell: "export PATH=$PATH:/usr/sbin; ./{{ op }}"
  args:
    chdir: "{{ stack_dir }}"
    executable: "/bin/bash"
  register: stack_op

- debug:
    msg: "{{ stack_op.stdout }}"
    verbosity: 2
  when: >-
    'stdout' in stack_op
      and (op=='info'
        or op=='status'
        or op=='health'
        or op=='logs'
        or op=='show_config')
    
- debug:
    msg: "{{ stack_op.stderr }}"
    verbosity: 2
  when: "'stderr' in stack_op"

- name: "Wait for stack to start in {{ stack_dir }}"
  # Change to add -q when that is released
  command: "chdir={{ stack_dir }}/ ./health.sh -m"
  register: cmd_result
  when: "state=='started' or state=='restarted'"
  #until: cmd_result.rc==0
  until: >- 
    'stdout' in cmd_result
    and 'Overall system health: HEALTHY' in cmd_result.stdout
  retries: "{{ retry_count }}"
  delay: "{{ delay_secs }}"

- name: "Wait for stack to stop in {{ stack_dir }}"
  shell: "docker ps -q --filter \"label=stack_name={{ stack_name }}\" | wc -l"
  register: result
  when: "state=='stopped'"
  #until: "'stdout' in result and '0' in result.stdout"
  until: "result.stdout == '0'"
  retries: "{{ retry_count }}"
  delay: "{{ delay_secs }}"

- debug:
    var: result
    verbosity: 2
