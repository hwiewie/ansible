---

- name: Stop kubelet systemd service
  systemd: name=kubelet.service state=stopped enabled=no
  ignore_errors: True
  register: stop_kubelet_service

- name: Stop docker systemd service
  when: container_runtime == 'docker' or container_runtime == 'nvidia-docker'
  systemd: name={{ item }} state=stopped enabled=no
  with_items:
    - docker.service
    - docker.socket
  ignore_errors: True
  register: stop_docker_service

- name: Cleanup container rutime directories and binaries
  when: stop_docker_service
  file: path="{{ item }}" state=absent
  with_items:
    - "{{ docker_data_dir }}"
    - "{{ docker_config_dir }}"
    - "{{ docker_shim_dir }}"
    - "{{ containerd_data_dir }}"
    - "{{ containerd_config_dir }}"
    - "{{ nvidia_runtime_config_dir }}"
    - "{{ libnvidia_header_file }}"
    - "{{ libnvidia_lib_dir }}"
    - "{{ package.docker.dir }}"
    - "{{ package.nvidia_docker.dir }}"
    - "{{ package.libnvidia_container.dir }}"
    - "{{ package.nvidia_container_runtime.dir }}"
    - "{{ package.containerd.dir }}"
    - "{{ bin_dir }}/docker"
    - "{{ bin_dir }}/dockerd"
    - "{{ bin_dir }}/docker-init"
    - "{{ bin_dir }}/docker-proxy"
    - "{{ bin_dir }}/docker-runc"
    - "{{ bin_dir }}/ctr"
    - "{{ bin_dir }}/critest"
    - "{{ bin_dir }}/crictl"
    - "{{ bin_dir }}/containerd"
    - "{{ bin_dir }}/containerd-shim"
    - "{{ bin_dir }}/containerd-shim-runc-v1"
    - "{{ bin_dir }}/containerd-stress"
    - "{{ bin_dir }}/nvidia-container-cli"
    - "{{ bin_dir }}/nvidia-container-runtime"
    - "{{ bin_dir }}/nvidia-container-runtime-hook"
    - "{{ bin_dir }}/nvidia-docker"
    - "{{ bin_dir }}/runc"
    - "{{ systemd_service_dir }}/docker.service"
    - "{{ systemd_service_dir }}/docker.socket"
    - "{{ systemd_service_dir }}/containerd.service"

- name: Stop containerd systemd service
  systemd: name=containerd.service state=stopped enabled=no
  ignore_errors: True
  register: stop_containerd_service

- name: Find containerd mounted volumes
  when: stop_containerd_service and container_runtime == 'containerd'
  shell: "df | grep -o '/run/containerd/.*'"
  ignore_errors: True
  register: containerd_mounts

- name: Unmounting containerd volumes
  when: containerd_mounts
  mount: name={{ item }} state=unmounted
  with_items: "{{ containerd_mounts.stdout_lines | list }}"
  ignore_errors: True

- name: Find kubelet mounted volumes
  when: stop_kubelet_service
  shell: "df | grep -o '/var/lib/kubelet.*'"
  ignore_errors: True
  register: kubelet_mounts

- name: Unmounting kubelet volumes
  when: kubelet_mounts
  mount: name={{ item }} state=unmounted
  with_items: "{{ kubelet_mounts.stdout_lines | list }}"
  ignore_errors: True

- name: Cleanup Kubenetes directories and binaries
  when: stop_kubelet_service
  file: path="{{ item }}" state=absent
  with_items:
    - "{{ etc_dir }}"
    - "{{ cni_etc_dir }}"
    - "{{ kubelet_config_dir }}"
    - "{{ audit_log_dir }}"
    - "{{ haproxy_config_dir }}"
    - "{{ ansible_env.HOME }}/.kube"
    - "{{ ansible_env.HOME }}/.helm"
    - "{{ package.kubelet.dir }}"
    - "{{ package.helm.dir }}"
    - "{{ package.cfssl.dir }}"
    - "{{ package.cni.dir }}"
    - "{{ bin_dir }}/cfssl"
    - "{{ bin_dir }}/cfssljson"
    - "{{ bin_dir }}/kubelet"
    - "{{ bin_dir }}/kubectl"
    - "{{ systemd_service_dir }}/kubelet.service"
  ignore_errors: True

- name: Delete IP-in-IP tunnel
  when: stop_kubelet_service
  command: "modprobe -r ipip"
  ignore_errors: True

- name: Find network interfaces for Kubernetes
  when: stop_kubelet_service
  shell: "ip addr | grep {{ item }}"
  with_items:
    - "docker0"
    - "flannel.1"
    - "cni0"
    - "tunl0"
  register: find_eths
  ignore_errors: True

- name: Delete network interfaces for Kubernetes
  when: stop_kubelet_service and item.stdout != ''
  shell: "ip link delete {{ item.item }}"
  with_items: "{{ find_eths['results'] }}"
  ignore_errors: True

- name: Find blackhole route rule
  when: stop_kubelet_service
  shell: "ip route | awk '/blackhole/ {print $2}'"
  register: find_blackhole
  ignore_errors: True

- name: Delete blackhole route rule
  when: stop_kubelet_service and find_blackhole.stdout != ''
  shell: "ip route del {{ find_blackhole.stdout }}"
  ignore_errors: True