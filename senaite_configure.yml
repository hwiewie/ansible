---

# GLOBAL SENAITE CONFIGURATION
#
# You can overwrite each variable in your custom cofiguration file which is run
# _after_ the `senaite_pre_tasks.yml`.
#
# Please see `vagrant-playbook.yml` for a running example.


### SENAITE BASE ###
additional_system_packages: []

# APT update intervals (`/etc/apt/apt.conf.d/10periodic`)
apt_do_upgrade_now: 0
apt_update_package_lists: 1
apt_download_upgradable_packages: 1
apt_autocleaninterval: 7
apt_unattended_upgrade: 1
### SENAITE BASE ###


### SENAITE HAPROXY ###
haproxy_frontend_bind_address: "127.0.0.1"
haproxy_frontend_port: "8080"
haproxy_with_http_stats: yes
haproxy_stats_user: admin
haproxy_stats_pass: admin
haproxy_frontend_id: senaite_frontend
haproxy_backend_id: senaite_backend
haproxy_backend_balance_method: leastconn
haproxy_backend_httpchk: 'HEAD / HTTP/1.1\r\nHost:localhost'
### SENAITE HAPROXY ###


### SENAITE NGINX ###
nginx_path: "/etc/nginx"
nginx_html_root: "/usr/share/nginx/senaite"
nginx_sites_available: "{{ nginx_path }}/sites-available"
nginx_sites_enabled: "{{ nginx_path }}/sites-enabled"
nginx_conf: "{{ nginx_path }}/nginx.conf"
nginx_extra_http_options: |
  proxy_read_timeout 1200s;

# VHOSTS
custom_vhosts:
  - senaite.local

# SSL
ssl_certificate: /etc/ssl/certs/ssl-cert-snakeoil.pem
ssl_certificate_key: /etc/ssl/private/ssl-cert-snakeoil.key

# https://github.com/geerlingguy/ansible-role-nginx
nginx_remove_default_vhost: true
nginx_server_names_hash_bucket_size: "256"
nginx_client_max_body_size: "1024m"
nginx_gzip: "on"
nginx_sendfile: "on"
nginx_tcp_nopush: "on"
nginx_tcp_nodelay: "on"
nginx_worker_processes: "{{ ansible_processor_vcpus | default(ansible_processor_count) }}"
nginx_worker_connections: "1024"
nginx_multi_accept: "off"
nginx_error_log: "/var/log/nginx/error.log warn"
nginx_access_log: "/var/log/nginx/access.log main buffer=16k flush=2m"
nginx_extra_conf_options: ""
# Example extra main options, used within the main nginx's context:
#   nginx_extra_conf_options: |
#     env VARIABLE;
#     include /etc/nginx/main.d/*.conf;
nginx_keepalive_timeout: "65"
nginx_keepalive_requests: "100"
nginx_proxy_cache_path: ""
nginx_upstreams: []
# - name: myapp1
#   strategy: "ip_hash" # "least_conn", etc.
#   keepalive: 16 # optional
#   servers: {
#     "srv1.example.com",
#     "srv2.example.com weight=3",
#     "srv3.example.com"
#   }
### SENAITE NGINX ###


### SENAITE MUNIN ###
munin_admin_user: admin
munin_admin_password: admin
munin_hostname: "SENAITE"
munin_dbdir: /var/lib/munin
munin_htmldir: /var/www/html/munin
munin_logdir: /var/log/munin
munin_rundir: /var/run/munin
munin_includedir: /etc/munin/conf.d
munin_html_strategy: cron
munin_graph_strategy: cron
munin_cron_job: present
munin_max_processes: 12
munin_host: 127.0.0.1
munin_port: 4949
munin_allow_ipv4: "^127\\.0\\.0\\.1$"
munin_allow_ipv6: "^::1$"
nginx_administrative_config: /etc/nginx/sites-available/administrative.conf

munin_alerts: []
#  - {
#    name: "JohnDoe",
#    email: "johndoe@example.com",
#    subject: "Munin-notification for ${var:group} :: ${var:host}",
#    level: "warning critical"
#   }

munin_dependencies:
  - libxml-parser-perl

munin_nginx_config: |
  # MUNIN STATIC FILES
  location /munin/static/ {
      alias /etc/munin/static/;
      expires modified +1w;
  }
  # MUNIN INSTANCE (protected by htpasswd)
  location /munin/ {
      auth_basic            "SENAITE Munin";
      auth_basic_user_file  /etc/munin/munin-htpasswd;
      alias /var/cache/munin/www/;
      expires modified +310s;
  }
  # NGINX STATUS (needed for the Munin NGINX plugin)
  location /nginx_status {
      stub_status on;
      access_log off;
      allow all;
  }

znagios_egg: '{{ plone_target_path }}/buildout-cache/eggs/Products.ZNagios-*.egg'

munin_plugin_conf: |
  [nginx_*]
  user root
  env.url http://127.0.0.1/nginx_status

  [haproxy*]
  user root
  env.backend {{ haproxy_backend_id }}
  env.frontend {{ haproxy_frontend_id }}
  env.url http://{{ haproxy_stats_user }}:{{ haproxy_stats_pass }}@{{ haproxy_frontend_bind_address }}:{{ haproxy_frontend_port }}/haproxy-status;csv;norefresh

  [zope_*]
  user root
  {% for client in range(0, plone_client_count|int) %}
  env.MUNIN_ZOPE_HOST_instance{{client + 1}} http://localhost:{{ plone_client_base_port | int + client }}/munin
  {% endfor %}

  [zeo_*]
  user root
  env.MUNIN_ZEO_HOST_ZEO1 {{ plone_zeo_ip }}
  env.MUNIN_ZEO_PORT_ZEO1 {{ zeo_monitor_port }}

munin_hosts:
  - {
    name: "{{ munin_hostname }}",
    address: "127.0.0.1",
    extra: ["use_node_name yes"]
  }

munin_plugins:
  # NGINX PLUGINS
  - src: /usr/share/munin/plugins/nginx_request
    dest: /etc/munin/plugins/nginx_request
  - src: /usr/share/munin/plugins/nginx_status
    dest: /etc/munin/plugins/nginx_status
  - src: /etc/munin/contrib/plugins/nginx/nginx_error
    dest: /etc/munin/plugins/nginx_error
  - src: /etc/munin/contrib/plugins/nginx/nginx_memory
    dest: /etc/munin/plugins/nginx_memory
  # HAPROXY
  - src: /usr/share/munin/plugins/haproxy_ng
    dest: /etc/munin/plugins/haproxy_ng
  # POSTFIX PLUGINS
  - src: /usr/share/munin/plugins/postfix_mailqueue
    dest: /etc/munin/plugins/postfix_mailqueue
  - src: /usr/share/munin/plugins/postfix_mailstats
    dest: /etc/munin/plugins/postfix_mailstats
  - src: /usr/share/munin/plugins/postfix_mailvolume
    dest: /etc/munin/plugins/postfix_mailvolume
### SENAITE MUNIN ###


### SENAITE POSTFIX ###
postfix_hostname: "{{ ansible_fqdn }}"
postfix_mynetworks:
  - 127.0.0.0/8
  - '[::ffff:127.0.0.0]/104'
  - '[::1]/128'
postfix_inet_interfaces: loopback-only
postfix_inet_protocols: all
postfix_relayhost: "{{ ansible_lo['ipv4']['address'] }}"
postfix_relayhost_port: 25
postfix_sasl_auth_enable: false
postfix_sasl_security_options: noanonymous
postfix_relaytls: false
postfix_smtp_generic_maps: []
### SENAITE POSTFIX ###


### SENAITE SECURITY ###
firewall_open_tcp_ports: [25, 80, 443]
firewall_use_fail2ban: no
### SENAITE SECURITY ###


### SENAITE PLONE ###
plone_version: '4.3.19'
plone_initial_password: admin
plone_instance_name: senaitelims
plone_site_id: senaitelims

# The creation of a default Plone site fails because of auditlog_catalog. So
# the SENAITE site creation must be done manually until we have our own script
plone_create_site: no

plone_extra_find_links:
plone_buildout_cache_url: http://dist.plone.org/release/{{ plone_version }}/buildout-cache.tar.bz2
plone_group: senaite
plone_buildout_user: senaite
plone_daemon_user: senaite_daemon
plone_target_path: "/home/{{ plone_buildout_user }}"
plone_var_path: "/home/{{ plone_buildout_user }}/data"
plone_backup_path: no
plone_additional_eggs:
  - senaite.core
  - senaite.lims
  - senaite.impress
plone_sources:
  - "senaite.core = git https://github.com/senaite/senaite.core.git"
  - "senaite.lims = git https://github.com/senaite/senaite.lims.git"
  - "senaite.impress = git https://github.com/senaite/senaite.impress.git"
# unpin versions in buildout.cfg
plone_additional_versions:
  - zc.buildout=
  - setuptools=

# There are incompatibility issues with the requirements for setuptools, pip
# and buildout provided by Plone. We pin here the versions to use
plone_download_requirements_txt: no
plone_setuptools_version: "39.2.0"
plone_zc_buildout_version: "2.13.2"
plone_pip_version:  "19.3.1"

# We manually run bin/buildout in senaite_plone.yml, cause python's
# site-packages generated because of new versions of pip and setuptools have
# wrong permissions (see README/Troubleshooting)
# https://github.com/senaite/senaite.ansible-playbook/blob/master/Readme.md#permission-denied-pip-and-setuptools
plone_always_run_buildout: no
plone_autorun_buildout: no

plone_zcml_slugs: []
plone_client_count: 2
plone_zserver_threads: 2
plone_zeo_ip: 127.0.0.1
plone_zeo_port: 8100
plone_client_base_port: 8081
plone_zodb_cache_size: 30000

# Supervisor Daemon HTTP
supervisor_with_http: yes
supervisor_http_port: "127.0.0.1:9001"
supervisor_http_user: "admin"
supervisor_http_pass: "admin"

# Zope Monitoring
monitoring_eggs:
  - Products.ZNagios
monitoring_zcml: []
monitoring_versions:
  - Products.ZNagios=0.7.2
zeo_monitor_port: 8999

# DB Pack
plone_pack_at:
  minute: 30
  hour: 1
  weekday: 7
plone_keep_days: 3

# DB Backup
plone_backup_at:
  minute: 30
  hour: 2
  weekday: "*"
plone_keep_backups: 5
plone_keep_blob_days: 21

# Final Plone config
senaite_plone_config:
  - plone_version: "{{ plone_version }}"
    plone_initial_password: "{{ plone_initial_password }}"
    plone_instance_name: "{{ plone_instance_name }}"
    plone_create_site: "{{ plone_create_site }}"
    plone_extra_find_links: "{{ plone_extra_find_links }}"
    plone_buildout_cache_url: "{{ plone_buildout_cache_url }}"
    plone_group: "{{ plone_group }}"
    plone_buildout_user: "{{ plone_buildout_user }}"
    plone_daemon_user: "{{ plone_daemon_user }}"
    plone_target_path: "{{ plone_target_path }}"
    plone_var_path: "{{ plone_var_path }}"
    plone_backup_path: "{{ plone_backup_path }}"
    plone_additional_eggs: "{{ plone_additional_eggs + monitoring_eggs }}"
    plone_sources: "{{ plone_sources }}"
    plone_zcml_slugs: "{{ plone_zcml_slugs + monitoring_zcml }}"
    plone_additional_versions: "{{ plone_additional_versions + monitoring_versions }}"
    plone_client_count: "{{ plone_client_count }}"
    plone_zserver_threads: "{{ plone_zserver_threads }}"
    plone_zeo_port: "{{ plone_zeo_port }}"
    plone_client_base_port: "{{ plone_client_base_port }}"
    plone_zodb_cache_size: "{{ plone_zodb_cache_size }}"
    plone_pack_at: "{{ plone_pack_at }}"
    plone_keep_days: "{{ plone_keep_days }}"
    plone_backup_at: "{{ plone_backup_at }}"
    plone_keep_backups: "{{plone_keep_backups }}"
    plone_keep_blob_days: "{{ plone_keep_blob_days }}"
### SENAITE PLONE ###
